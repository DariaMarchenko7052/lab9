// –ï–ª–µ–º–µ–Ω—Ç–∏ DOM
const regForm = document.getElementById("registration-form");
const loginForm = document.getElementById("login-form");
const startBtn = document.getElementById("start-game");
const backBtn = document.getElementById("back-to-settings");
const addItemBtn = document.getElementById("add-item-btn");
const choicesDiv = document.getElementById("choices");
const resultDiv = document.getElementById("result");
const scoreboardDiv = document.getElementById("scoreboard");
const welcomeSection = document.getElementById("welcome-section");
const welcomeMessage = document.getElementById("welcome-message");
const registrationSection = document.getElementById("registration-section");
const loginSection = document.getElementById("login-section");
const settingsSection = document.getElementById("settings-section");
const gameSection = document.getElementById("game-section");

let currentUser = null;
let gameHistory = [];
let items = JSON.parse(localStorage.getItem("items") || "[]");

// –ü–æ—á–∞—Ç–∫–æ–≤—ñ –ø—Ä–µ–¥–º–µ—Ç–∏, —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î
if (items.length === 0) {
  items = [
    { name: "–ö–∞–º—ñ–Ω—å", beats: ["–ù–æ–∂–∏—Ü—ñ"] },
    { name: "–ù–æ–∂–∏—Ü—ñ", beats: ["–ü–∞–ø—ñ—Ä"] },
    { name: "–ü–∞–ø—ñ—Ä", beats: ["–ö–∞–º—ñ–Ω—å"] }
  ];
  localStorage.setItem("items", JSON.stringify(items));
}

// –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è (SHA-256)
async function hashPassword(password) {
  const data = new TextEncoder().encode(password);
  const hashBuffer = await crypto.subtle.digest("SHA-256", data);
  return Array.from(new Uint8Array(hashBuffer))
    .map(b => b.toString(16).padStart(2, "0"))
    .join("");
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É JSON —ñ XML
function saveUsers(users) {
  localStorage.setItem("usersJSON", JSON.stringify(users, null, 2));
  const xmlParts = ['<users>'];
  users.forEach(u => {
    xmlParts.push(`
      <user>
        <fullname>${u.fullname}</fullname>
        <birthdate>${u.birthdate}</birthdate>
        <email>${u.email}</email>
        <login>${u.login}</login>
        <passwordHash>${u.passwordHash}</passwordHash>
      </user>
    `);
  });
  xmlParts.push("</users>");
  localStorage.setItem("usersXML", xmlParts.join(""));
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
function loadUsers() {
  return JSON.parse(localStorage.getItem("usersJSON") || "[]");
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∏
function saveJSON(data) {
  localStorage.setItem("gameStatsJSON", JSON.stringify(data, null, 2));
}

function saveXML(data) {
  const xml = ['<games>'];
  data.forEach(d => {
    xml.push(`<game><round>${d.round}</round><player>${d.player}</player><bot>${d.bot}</bot><result>${d.result}</result></game>`);
  });
  xml.push('</games>');
  localStorage.setItem("gameStatsXML", xml.join(''));
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—è–∫—â–æ —Ç—Ä–µ–±–∞ ‚Äî –¥–æ–¥–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ç–∞ —Ü—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏)
document.getElementById("show-json-btn")?.addEventListener("click", () => {
  document.getElementById("game-stats-section").classList.remove("hidden");
  statsOutput.textContent = localStorage.getItem("gameStatsJSON") || "–ù–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏";
});
document.getElementById("show-xml-btn")?.addEventListener("click", () => {
  document.getElementById("game-stats-section").classList.remove("hidden");
  statsOutput.textContent = localStorage.getItem("gameStatsXML") || "–ù–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏";
});

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
regForm.addEventListener("submit", async e => {
  e.preventDefault();

  const formData = new FormData(regForm);
  const fullname = formData.get("fullname").trim();
  const birthdate = formData.get("birthdate");
  const email = formData.get("email").trim();
  const login = formData.get("login").trim();
  const password = formData.get("password");

  if (!fullname || !birthdate || !email || !login || !password) {
    alert("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è");
    return;
  }
  addPlayerToStorage(player)

  let users = loadUsers();

  if (users.find(u => u.login === login)) {
    alert("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º –ª–æ–≥—ñ–Ω–æ–º –≤–∂–µ —ñ—Å–Ω—É—î");
    return;
  }

  const passwordHash = await hashPassword(password);

  const newUser = { fullname, birthdate, email, login, passwordHash };

  users.push(newUser);
  saveUsers(users);

  alert("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –¢–µ–ø–µ—Ä —É–≤—ñ–π–¥—ñ—Ç—å.");

  regForm.reset();
});

// –í—Ö—ñ–¥
loginForm.addEventListener("submit", async e => {
  e.preventDefault();

  const formData = new FormData(loginForm);
  const login = formData.get("login").trim();
  const password = formData.get("password");

  let users = loadUsers();

  const passwordHash = await hashPassword(password);

  const user = users.find(u => u.login === login && u.passwordHash === passwordHash);

  if (!user) {
    alert("–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å");
    return;
  }

  currentUser = user;

  registrationSection.classList.add("hidden");
  loginSection.classList.add("hidden");
  settingsSection.classList.remove("hidden");
  welcomeSection.classList.remove("hidden");
  welcomeMessage.textContent = `–í—ñ—Ç–∞—î–º–æ, ${user.fullname}!`;

  updateItemsList();
  updateScoreboardFromHistory();
});

// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥—Ä—ñ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
backBtn.addEventListener("click", () => {
  gameSection.classList.add("hidden");
  settingsSection.classList.remove("hidden");
});

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
addItemBtn.addEventListener("click", () => {
  const name = document.getElementById("new-item-name").value.trim();
  const beatsStr = document.getElementById("new-item-beats").value.trim();

  if (!name || !beatsStr) return alert("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è");

  if (items.find(item => item.name.toLowerCase() === name.toLowerCase()))
    return alert("–¢–∞–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç –≤–∂–µ —ñ—Å–Ω—É—î");

  const beats = beatsStr.split(",").map(s => s.trim()).filter(Boolean);
  items.push({ name, beats });
  localStorage.setItem("items", JSON.stringify(items));
  updateItemsList();
  document.getElementById("new-item-name").value = "";
  document.getElementById("new-item-beats").value = "";
});

// –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
function updateItemsList() {
  const container = document.getElementById("items-section");
  // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–ø–∏—Å–æ–∫, —â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞–≤—Å—è
  const oldList = container.querySelector("ul");
  if (oldList) container.removeChild(oldList);

  const list = document.createElement("ul");
  items.forEach((item, i) => {
    const li = document.createElement("li");
    li.textContent = `${item.name} (–ø–µ—Ä–µ–º–∞–≥–∞—î: ${item.beats.join(", ")}) `;
    const delBtn = document.createElement("button");
    delBtn.textContent = "üóëÔ∏è";
    delBtn.onclick = () => {
      if (confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ "${item.name}"?`)) {
        items.splice(i, 1);
        localStorage.setItem("items", JSON.stringify(items));
        updateItemsList();
      }
    };
    li.appendChild(delBtn);
    list.appendChild(li);
  });
  container.appendChild(list);
}

// –ü–æ—á–∞—Ç–∏ –≥—Ä—É
startBtn.addEventListener("click", () => {
  settingsSection.classList.add("hidden");
  gameSection.classList.remove("hidden");
  renderChoices();
  resultDiv.textContent = "";
  scoreboardDiv.textContent = "";
  gameHistory = [];
});

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –≤–∏–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
function renderChoices() {
  choicesDiv.innerHTML = "";
  items.forEach(item => {
    const btn = document.createElement("button");
    btn.textContent = item.name;
    btn.onclick = () => playRound(item.name);
    choicesDiv.appendChild(btn);
  });
}

// –ì—Ä–∞—Ç–∏ —Ä–∞—É–Ω–¥
function playRound(playerChoice) {
  const botChoice = getBotChoice();
  const outcome = getRoundResult(playerChoice, botChoice);

  resultDiv.textContent = `–í–∏: ${playerChoice} | –ë–æ—Ç: ${botChoice} ‚Üí ${outcome}`;
  gameHistory.push({
    round: gameHistory.length + 1,
    player: playerChoice,
    bot: botChoice,
    result: outcome
  });

  saveJSON(gameHistory);
  saveXML(gameHistory);
  updateScoreboard();
}

// –í–∏–±—ñ—Ä –±–æ—Ç–∞ (–ø—Ä–æ—Å—Ç–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∞ –ª–æ–≥—ñ–∫–∞)
function getBotChoice() {
  const randIndex = Math.floor(Math.random() * items.length);
  return items[randIndex].name;
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ä–∞—É–Ω–¥—É
function getRoundResult(player, bot) {
  if (player === bot) return "–ù—ñ—á–∏—è";

  const playerItem = items.find(item => item.name === player);
  if (playerItem.beats.includes(bot)) return "–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏!";
  return "–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏!";
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–æ
function updateScoreboard() {
  const wins = gameHistory.filter(r => r.result === "–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏!").length;
  const losses = gameHistory.filter(r => r.result === "–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏!").length;
  const draws = gameHistory.filter(r => r.result === "–ù—ñ—á–∏—è").length;

  scoreboardDiv.innerHTML = `
    <p>–ü–µ—Ä–µ–º–æ–≥–∏: ${wins}</p>
    <p>–ü–æ—Ä–∞–∑–∫–∏: ${losses}</p>
    <p>–ù—ñ—á–∏—ó: ${draws}</p>
  `;
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–æ –∑–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ—é —ñ—Å—Ç–æ—Ä—ñ—î—é –≥—Ä–∏ (–ø—Ä–∏ –≤—Ö–æ–¥—ñ)
function updateScoreboardFromHistory() {
  const savedHistory = JSON.parse(localStorage.getItem("gameStatsJSON") || "[]");
  if (savedHistory.length) {
    gameHistory = savedHistory;
    updateScoreboard();
  }
}
function downloadFile(filename, content, type = 'application/json') {
  const blob = new Blob([content], { type });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  a.remove();
  URL.revokeObjectURL(url);
}

// –°–∫–∞—á—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ JSON
document.getElementById("download-users-json").addEventListener("click", () => {
  const usersJSON = localStorage.getItem("usersJSON");
  if (!usersJSON) return alert("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤");
  downloadFile("users.json", usersJSON, "application/json");
});

// –°–∫–∞—á—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ XML
document.getElementById("download-users-xml").addEventListener("click", () => {
  const usersXML = localStorage.getItem("usersXML");
  if (!usersXML) return alert("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤");
  downloadFile("users.xml", usersXML, "application/xml");
});

// –°–∫–∞—á—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∏ JSON
document.getElementById("download-game-json").addEventListener("click", () => {
  const gameJSON = localStorage.getItem("gameStatsJSON");
  if (!gameJSON) return alert("–ù–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∏");
  downloadFile("game_stats.json", gameJSON, "application/json");
});

// –°–∫–∞—á—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∏ XML
document.getElementById("download-game-xml").addEventListener("click", () => {
  const gameXML = localStorage.getItem("gameStatsXML");
  if (!gameXML) return alert("–ù–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∏");
  downloadFile("game_stats.xml", gameXML, "application/xml");
});
function addPlayerToStorage(newPlayer) {
  let players = JSON.parse(localStorage.getItem("players")) || [];

  // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º fullname –∏–ª–∏ –ª–æ–≥–∏–Ω–æ–º
  const existingIndex = players.findIndex(p => p.login === newPlayer.login);

  if (existingIndex !== -1) {
    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–∏–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, email, fullname)
    players[existingIndex] = {...players[existingIndex], ...newPlayer};
  } else {
    // –î–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    players.push(newPlayer);
  }

  localStorage.setItem("players", JSON.stringify(players));
}
// –ü—Ä–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ localStorage
function loadPlayers() {
  return JSON.parse(localStorage.getItem("players") || "[]");
}
function savePlayers(players) {
  localStorage.setItem("players", JSON.stringify(players));
}

// –î–æ–±–∞–≤–ª—è—î–º–æ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ, —è–∫—â–æ –ª–æ–≥—ñ–Ω –≤–∂–µ —î
function addOrUpdatePlayer(player) {
  let players = loadPlayers();
  const index = players.findIndex(p => p.login === player.login);
  if (index !== -1) {
    players[index] = {...players[index], ...player};
  } else {
    players.push(player);
  }
  savePlayers(players);
}

// –†–æ–∑–¥—ñ–ª—è—î–º–æ –ü–Ü–ë –Ω–∞ –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ü–º'—è
function splitFullName(fullname) {
  const parts = fullname.trim().split(/\s+/);
  return {
    surname: parts[0] || "",
    name: parts.slice(1).join(" ") || ""
  };
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —Å–æ—Ä—Ç—É—î–º–æ –ø–æ –ü—Ä—ñ–∑–≤–∏—â—É (alphabetically)
function renderStatsTable() {
  const players = loadPlayers();
  players.sort((a,b) => {
    const aSurname = splitFullName(a.fullname).surname.toLowerCase();
    const bSurname = splitFullName(b.fullname).surname.toLowerCase();
    if (aSurname < bSurname) return -1;
    if (aSurname > bSurname) return 1;
    return 0;
  });

  const tbody = document.querySelector("#players-table tbody");
  tbody.innerHTML = "";

  for (const p of players) {
    const {surname, name} = splitFullName(p.fullname);
    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td>${surname}</td>
      <td>${name}</td>
      <td>${p.birthdate}</td>
      <td>${p.wins || 0}</td>
      <td>${p.draws || 0}</td>
      <td>${p.losses || 0}</td>
      <td>${p.botLevel || "-"}</td>
    `;
    tbody.appendChild(tr);
  }
}

// –ü—Ä–∏—Ö–æ–≤—É—î–º–æ/–ø–æ–∫–∞–∑—É—î–º–æ —Å–µ–∫—Ü—ñ—ó
function showSection(idToShow) {
  ["registration-section", "login-section", "stats-section"].forEach(id => {
    document.getElementById(id).classList.toggle("hidden", id !== idToShow);
  });
}

// –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ª–æ–≥—ñ–∫–∞
document.addEventListener("DOMContentLoaded", () => {
  showSection("registration-section");

  const regForm = document.getElementById("registration-form");
  const loginForm = document.getElementById("login-form");

  // –û–±—Ä–æ–±–Ω–∏–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
  regForm.addEventListener("submit", e => {
    e.preventDefault();

    const formData = new FormData(regForm);
    const fullname = formData.get("fullname").trim();
    const birthdate = formData.get("birthdate");
    const email = formData.get("email");
    const login = formData.get("login").trim();
    const password = formData.get("password"); // –ù–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–æ–ª—å –≤—ñ–¥–∫—Ä–∏—Ç–æ!

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –ª–æ–≥—ñ–Ω–∞
    const players = loadPlayers();
    if (players.find(p => p.login === login)) {
      alert("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ —Ç–∞–∫–∏–º –ª–æ–≥—ñ–Ω–æ–º –≤–∂–µ —ñ—Å–Ω—É—î.");
      return;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞–≤—Ü—è –∑ –ø–æ—á–∞—Ç–∫–æ–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
    const newPlayer = {
      fullname,
      birthdate,
      email,
      login,
      wins: 0,
      draws: 0,
      losses: 0,
      botLevel: "-"
    };

    addOrUpdatePlayer(newPlayer);

    alert("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ! –¢–µ–ø–µ—Ä —É–≤—ñ–π–¥—ñ—Ç—å.");

    regForm.reset();
    showSection("login-section");
  });

  // –û–±—Ä–æ–±–Ω–∏–∫ –≤—Ö–æ–¥—É
  loginForm.addEventListener("submit", e => {
    e.preventDefault();

    const formData = new FormData(loginForm);
    const login = formData.get("login").trim();
    const password = formData.get("password");

    const player = loadPlayers().find(p => p.login === login);

    if (!player) {
      alert("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return;
    }
    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø–∞—Ä–æ–ª—è, —è–∫—â–æ –±—É–¥–µ—à –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –π–æ–≥–æ (–∫—Ä–∞—â–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ)

    alert(`–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${player.fullname}`);

    // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∑–∞—Ä–∞–∑ –ø—Ä–æ—Å—Ç–æ)
    showSection("stats-section");
    renderStatsTable();
  });
});
function renderStatsTable() {
  const players = JSON.parse(localStorage.getItem("players") || "[]");

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å fullname)
  players.sort((a,b) => {
    const aSurname = (a.fullname || "").split(" ")[0].toLowerCase();
    const bSurname = (b.fullname || "").split(" ")[0].toLowerCase();
    return aSurname.localeCompare(bSurname);
  });

  const tbody = document.querySelector("#players-table tbody");
  tbody.innerHTML = ""; // –æ—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π

  for (const p of players) {
    const [surname, ...nameParts] = (p.fullname || "").split(" ");
    const name = nameParts.join(" ");
    const tr = document.createElement("tr");

    tr.innerHTML = `
      <td>${surname || ""}</td>
      <td>${name || ""}</td>
      <td>${p.birthdate || ""}</td>
      <td>${p.wins || 0}</td>
      <td>${p.draws || 0}</td>
      <td>${p.losses || 0}</td>
      <td>${p.botLevel || "-"}</td>
    `;

    tbody.appendChild(tr);
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–∫—Ä—ã—Ç–∞
  document.getElementById("stats-section").classList.remove("hidden");
}
document.addEventListener("DOMContentLoaded", () => {
  renderStatsTable();
});
